---
title: "Customer Behaviour Prediction (Naive Bayes)"
format: html
date: 2025-05-04
---

## Import Data
```{python}
#| label: Import data
import numpy as np
import pandas as pd
from pyhere import here
import matplotlib.pyplot as plt

df = pd.read_csv(here('data/ch02/customer_behaviour/customer_behaviour.csv'))
```

Download data manually from site:
`https://www.kaggle.com/code/arezalo/customer-behaviour-prediction-naive-bayes/input`

## EDA

```{python}
df.head()
```

```{python}
df.info()
```

There are 400 rows and 5 columns.

Are all user id unique?

```{python}
df['User ID'].nunique()
```

There are 400 unique users.

### Explore individual variables

#### Age
```{python}
df['Age'].describe()
```

The mean age is 38 years old and median is 37 years old.

```{python}
#| label: calculate-age-skew-kurtosis

# Calculate skewness
age_skewness = df['Age'].skew()

# Calculate kurtosis
age_kurtosis = df['Age'].kurt() # Pandas uses Fisher's definition (normal=0) by default

print(f"Skewness of Age: {age_skewness:.4f}")
print(f"Kurtosis of Age: {age_kurtosis:.4f}")

```

Skew is 0.2313
Kurtosis is -0.625

```{python}
#| label: plot-age-density
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6)) # Optional: Adjust the figure size for better readability
sns.kdeplot(df['Age'], fill=True) # Use kdeplot for density curve, fill=True shades the area
plt.title('Density Plot of Customer Age')
plt.xlabel('Age')
plt.ylabel('Density')
plt.grid(axis='y', linestyle='--', alpha=0.7) # Optional: Add a grid for easier reading
plt.show()
```

Density plot is symmetrical.

#### Estimate Salary
```{python}
df['EstimatedSalary'].describe()
```

The mean salary is $6,974.20 and median is $7,000.00.


```{python}
#| label: plot-salary-density-rotated
# import seaborn as sns
# import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6)) # Optional: Adjust the figure size
sns.kdeplot(df['EstimatedSalary'], fill=True)
plt.title('Density Plot of Estimated Salary')
plt.xlabel('Salary')
plt.ylabel('Density')
plt.xticks(rotation=45) # Rotate the x-axis labels by 45 degrees
plt.grid(axis='y', linestyle='--', alpha=0.7) # Optional: Add a grid
plt.tight_layout() # Optional: Adjust layout to prevent labels overlapping
plt.show()

```

#### Gender

```{python}
df['Gender'].describe()
```


```{python}
df['Gender'].value_counts().to_frame().assign(prop = lambda x: x['count']/sum(x['count']))
```

There are 204 (51.0%) females and 196 males (49.0%).

#### Purchased
```{python}
df['Purchased'].value_counts().to_frame().assign(prop = lambda x: x['count']/sum(x['count']))
```

143 (35.8%) made a purchase and 257 (64.3%) did not.

## Check for Missing data

```{python}
df.isnull().sum().to_frame('NaN value').T
```

## Check for cardinality

```{python}
for col in df.columns:
    print(f'{col} has {df[col].nunique()} values.')
```


```{python}
df.describe(include=[np.number]).round(1).T
```


```{python}
df.describe(include=[object]).T
```


```{python}
# drop the user id column
df.drop('User ID', axis=1, inplace=True)
df
```


```{python}
# convert categoriacl feature to numerical:
# only Gender is categorical
# df['Gender'] = df['Gender'].replace(['Male', 'Female'], [0, 1])
df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})
df
```


```{python}
df.info()
```

## More EDA

```{python}
# check distribution of EstimatedSalary (based on Purchased)
# font = {'fontsize':16, 'fontstyle':'italic', 'backgroundcolor':'black', 'color':'orange'}
# %matplotlib inline
# plt.style.use('seaborn-notebook')
sns.kdeplot(df.loc[df['Purchased'] == 0, 'EstimatedSalary'], label='No Purchased', shade=True)
sns.kdeplot(df.loc[df['Purchased'] == 1, 'EstimatedSalary'], label='Purchased', shade=True)
plt.title('KDE of EstimatedSalary (based on Purchased)', fontdict=font, pad=15)
plt.xticks(np.arange(0,200001,10000), rotation=90)
plt.xlim([0,200001])
plt.legend()
plt.show()
```


```{python}
# check distribution of Purchased (based on Purchased)
# %matplotlib inline
# plt.style.use('seaborn-notebook')
sns.kdeplot(df.loc[df['Purchased'] == 0, 'Age'], label='No Purchased', shade=True)
sns.kdeplot(df.loc[df['Purchased'] == 1, 'Age'], label='Purchased', shade=True)
plt.title('KDE of Age (based on Purchased)', fontdict=font, pad=15)
plt.xticks(np.arange(0,70,5))
plt.xlim([10,70])
plt.legend()
plt.show()
```


```{python}
# check distribution of EstimatedSalary (based on Gender)
# %matplotlib inline
# plt.style.use('seaborn-notebook')
sns.kdeplot(df.loc[df['Gender'] == 0, 'EstimatedSalary'], label='Male', shade=True)
sns.kdeplot(df.loc[df['Gender'] == 1, 'EstimatedSalary'], label='Female', shade=True)
plt.title('KDE of EstimatedSalary (based on Gender)', fontdict=font, pad=15)
plt.xticks(np.arange(0,150001,10000), rotation=90)
plt.xlim([0,150001])
plt.legend()
plt.show()
```


```{python}
# check distribution of Age (based on Gender)
# %matplotlib inline
# plt.style.use('seaborn-notebook')
sns.kdeplot(df.loc[df['Gender'] == 0, 'Age'], label='Male', shade=True)
sns.kdeplot(df.loc[df['Gender'] == 1, 'Age'], label='Female', shade=True)
plt.title('KDE of Age (based on Gender)', fontdict=font, pad=15)
plt.xticks(np.arange(0,70,5))
plt.xlim([10,70])
plt.legend()
plt.show()
```